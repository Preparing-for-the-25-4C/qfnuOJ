{
    "说明": "小明过生日的时候，爸爸送给他一副乌龟棋当作礼物。\n乌龟棋的棋盘是一行N个格子，每个格子上一个分数（非负整数）。棋盘第1格是唯一的起点，第N格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。\n\n……\n1 2 3 4 5 …… N\n乌龟棋中M张爬行卡片，分成4种不同的类型（M张卡片中不一定包含所有4种类型的卡片，见样例），每种类型的卡片上分别标有1、2、3、4四个数字之一，表示使用这种卡片后，乌龟棋子将向前爬行相应的格子数。游戏中，玩家每次需要从所有的爬行卡片中选择一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。\n游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到\n该格子相应的分数。玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的\n分数总和。\n很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡\n片使用顺序使得最终游戏得分最多。\n现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到\n多少分吗？",
    "输入格式": "每组输入数据的每行中两个数之间用一个空格隔开。第1行2个正整数N和M，分别表示棋盘格子数和爬行卡片数。第2行N个非负整数，a1a2...aN，其中ai表示棋盘第i个格子上的分数。第3行M个整数，b1b2...bM，表示M张爬行卡片上的数字。 输入数据保证到达终点时刚好用光M张爬行卡片，即N-1=∑(1->M)bi。\n数据规模：\n对于30%的数据有1≤N≤30，1≤M≤12；\n对于50%的数据有1≤N≤120，1≤M≤50，且4种爬行卡片，每种卡片的张数不会超过20。\n对于100%的数据有1≤N≤350，1≤M≤120，且4种爬行卡片，每种卡片的张数不会超过40；\n0≤ai≤100，1≤i≤N；\n1≤bi≤4，1≤i≤M。\n输入数据保证N−1=\n∑(1->M)bi。",
    "输出格式": "每组输出只有1行，1个整数，表示小明最多能得到的分数。\n下面是对样例数据的解释：\n小明使用爬行卡片顺序为1，1，3，1，2，得到的分数为6+10+14+8+18+17=73。注意，由于起点是1，所以自动获得第1格的分数6。",
    "样例": {
        "输入": "9 5\n6 10 14 2 8 8 18 5 17\n1 3 1 2 1\n\n13 8\n4 96 10 64 55 13 94 53 5 24 89 8 30\n1 1 1 1 1 2 4 1",
        "输出": "73\n\n455"
    }
}